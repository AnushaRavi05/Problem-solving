Consider an array of numeric strings where each string is a positive number with anywhere from  to  digits. 
Sort the array's elements in non-decreasing, or ascending order of their integer values and return the sorted array.
bigSorting has the following parameter(s):
string unsorted[n]: an unsorted array of integers as strings Returns
string[n]: the array sorted in numerical order

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> bigSorting(vector<string> unsorted) {
    sort(unsorted.begin(), unsorted.end(), [](const string &a, const string &b) {
        if (a.size() != b.size()) 
            return a.size() < b.size(); // Compare by length first
        return a < b; // If same length, compare lexicographically
    });
    return unsorted;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<string> unsorted(n);

    for (int i = 0; i < n; i++) {
        string unsorted_item;
        getline(cin, unsorted_item);

        unsorted[i] = unsorted_item;
    }
vector<string> result = bigSorting(unsorted);
 for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }
  fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

