Print two space-separated integers on one line: the minimum sum and the maximum sum of  of  elements.No value should be returned.


Input Format
A single line of five space-separated integers.

Constraints
Sample Input
1 2 3 4 5
Sample Output
10 14

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

void miniMaxSum(vector<int> arr) {
    long long totalSum = 0;
    int minValue = INT_MAX, maxValue = INT_MIN;

    for (int num : arr) {
        totalSum += num;
        minValue = min(minValue, num);
        maxValue = max(maxValue, num);
    }

    long long minSum = totalSum - maxValue;
    long long maxSum = totalSum - minValue;

    cout << minSum << " " << maxSum << endl;
}

int main()
{

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(5);

    for (int i = 0; i < 5; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    miniMaxSum(arr);

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}




