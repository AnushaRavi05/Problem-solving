Sample Challenge
This is a simple challenge to get things started. Given a sorted array () and a number (), 
can you print the index location of  in the array?

Example
Return  for a zero-based index array.
If you are going to use the provided code for I/O, this next section is for you.
Function Description
Complete the introTutorial function in the editor below. It must return an integer
representing the zero-based index of .
introTutorial has the following parameter(s):
int arr[n]: a sorted array of integers
int V: an integer to search for
Returns int: the index of  in 
The next section describes the input format. You can often skip it, if you are using included methods or code stubs.

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
int introTutorial(int V, vector<int> arr) {
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] == V) {
            return i; 
        }
    }
    return -1; 


int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string V_temp;
    getline(cin, V_temp);

    int V = stoi(ltrim(rtrim(V_temp)));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = introTutorial(V, arr);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
