ou are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2].
Each integer appears exactly once except a which appears twice and b which is missing. 
The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.

#include <vector>
#include <unordered_set>
#include <numeric>
using namespace std;

class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {
        
        vector<int> nums;
        for (auto& row : grid) {
            nums.insert(nums.end(), row.begin(), row.end());
        }
        
        
        unordered_set<int> seen;
        int repeated = -1;
        int totalElements = nums.size();
        
        
        for (int num : nums) {
            if (seen.find(num) != seen.end()) {
                repeated = num;
            } else {
                seen.insert(num);
            }
        }
        
        
        int expectedSum = (totalElements * (totalElements + 1)) / 2;
        int actualSum = 0;
        
        for (int num : nums) {
            actualSum += num;
        }
        
        
        int missing = expectedSum - (actualSum - repeated);
        
      
        return {repeated, missing};
    }
};
