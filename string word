You are given a string word and a non-negative integer k.

Return the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.

 class Solution {
    public long countOfSubstrings(String word, int k) {
        int[][] freq = new int[2][128];
        freq[0]['a'] = 1;
        freq[0]['e'] = 1;
        freq[0]['i'] = 1;
        freq[0]['o'] = 1;
        freq[0]['u'] = 1;
        long response = 0;
        int currentK = 0, vowels = 0, extraLeft = 0;
        for(int right = 0, left = 0; right < word.length(); right++){
            char rightChar = word.charAt(right);
            if(freq[0][rightChar] == 1){
                if(++freq[1][rightChar] == 1) vowels++;
            }
            else{
                currentK++;
            }
            while(currentK > k){
                char leftChar = word.charAt(left);
                if(freq[0][leftChar] == 1){
                    if(--freq[1][leftChar] == 0) vowels--;
                }
                else{
                    currentK--;
                }
                left++;
                extraLeft = 0;
            }
            while(vowels == 5 && currentK == k && left < right && freq[0][word.charAt(left)] ==1 && freq[1][word.charAt(left)] > 1){
                extraLeft++;
                freq[1][word.charAt(left)]--;
                left++;
            }
            if(currentK == k && vowels == 5){
                response += (1 + extraLeft);
            }
        }
        return response;
    }
}
